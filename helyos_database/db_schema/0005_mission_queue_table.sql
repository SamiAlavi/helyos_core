 
---
-- Name: work_processes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE IF NOT EXISTS public.mission_queue (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name character varying,
    status character varying,
    description character varying,
    created_at timestamp(6) without time zone DEFAULT NOW(),
    modified_at timestamp(6) without time zone DEFAULT NOW(),
    started_at timestamp(6) without time zone,
    ended_at timestamp(6) without time zone,
    sched_start_at timestamp(6) without time zone,
    sched_end_at timestamp(6) without time zone,
    stop_on_failure boolean DEFAULT false
);


comment on column mission_queue.status is '@ status of this work process: "stop", "stopped", "failed", "run", "running", "ended", "ended-with-failures"';
comment on column mission_queue.description is '@ description';
comment on column mission_queue.sched_start_at is '@ specify when the work process will be processed: path planning, agent reservation, etc.';
comment on column mission_queue.stop_on_failure is '@ specify if the run list should stop or continue when one work process fails';


-- process_type is depracated, it will be substituted by work_process_type_name
-- description is depracated, it will be substituted by data



CREATE OR REPLACE FUNCTION public.trigger_set_timestamp_mission_queue()
RETURNS TRIGGER AS 
$BODY$
BEGIN
  NEW.modified_at = NOW();
  RETURN NEW;
END;
$BODY$ 
LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp_mission_queue
BEFORE UPDATE ON  public.mission_queue
FOR EACH ROW
EXECUTE PROCEDURE  public.trigger_set_timestamp_mission_queue();




